<?php
/**
 * 买卖股票的最佳时机 IV
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
本题与上一题的不同之处在于，未给定k的值。122题，k相当于无穷大，可以多次买卖。123题，给定了k=2，只能交易两次。而本题k为随机数，因此，需要判断k的范围。实际上本题时122和123的杂交题。
1.状态定义
//由于每次交易必然需要买入和卖出，因此，k < pricesize / 2;当 k > pricesize 时，就相当于122题
定义DP[i][k][0]	为第i天不持股时的利润,第k次交易
定义DP[i][k][1]	为第i天持股时的最大利润，第k次交易

​2.状态转移方程
针对第 i 天所获得的最大利润，分为两种情况：
如果第 i 天不持有股票，可能第 i - 1 天时就已经不持股，也可能是在第 i 天时卖出了股票，并收取手续费。
如果第 i 天仍然持有股票,可能第 i - 1 天还没有卖出股票，那么当前的最大利润应该是第 i - 1 天的最大利润，交易数为***k***。也可能是在第 i - 1 天时卖出了股票，此时可交易数应为 k - 1 。而在第 i 天时重新购入股票。
	dp[i][k][0] = MAX(dp[i - 1][k][0], dp[i - 1][k][1] + price[i]);
	dp[i][k][1] = MAX(dp[i - 1][k][1], dp[i - 1][k - 1][0] - price[i]);
 */
class Solution{
	function maxProfit($prices,$k){
		$n = count($prices);
		if($n<=0) return 0;	
		if($k<=0) return 0;	
		$dp = [];
		
		for ($i=1; $i < $k+1; $i++) { 
			$dp[0][$i][0] = 0;
			$dp[0][$i][1] = -$prices[0];
		}
		
		for ($i=1; $i < $n; $i++) { 
			for ($j=1; $j < $k+1; $j++) { 
				$dp[$i][$j][0] = max($dp[$i-1][$j][0],$dp[$i-1][$j][1]+$prices[$i]);			
				$dp[$i][$j][1] = max($dp[$i-1][$j][1],$dp[$i-1][$j-1][0]-$prices[$i]);
			}
			
		}
		return $dp[$n-1][$k][0];
	}
}
$s = new Solution();
echo "<pre>";
$k =2;
var_dump($s->maxProfit([3,2,6,5,0,3],$k));