<?php
/**
 * 买卖股票最佳时机含手续费
 * 给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。

你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。

返回获得利润的最大值。

**注意：**这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。

示例 1:

输入: prices = [1, 3, 2, 8, 4, 9], fee = 2
输出: 8
解释: 能够达到的最大利润:  
在此处买入 prices[0] = 1
在此处卖出 prices[3] = 8
在此处买入 prices[4] = 4
在此处卖出 prices[5] = 9
总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
状态定义
定义DP[i][0]为第i天不持股时的利润
定义DP[i][1]为第i天持股时的最大利润
状态方程
针对第 i 天所获得的最大利润，分为两种情况：

如果第 i 天不持有股票，可能第 i - 1 天时就已经不持股，也可能是在第 i 天时卖出了股票，并收取手续费。
如果第 i 天仍然持有股票,可能第 i - 1 天还没有卖出股票，那么当前的最大利润应该是第 i - 1 天的最大利润。也可能是在第 i - 1 天时卖出了股票，而在第 i 天时重新购入股票。
 */
class Solution{
	function maxProfit($prices,$free){
		$n = count($prices);
		if($n<=0) return 0;		
		$dp = [];
		$dp[0][0] = 0;
		$dp[0][1] = -$prices[0];
		for ($i=1; $i < $n; $i++) { 
			$dp[$i][0] = max($dp[$i-1][0],$dp[$i-1][1]+$prices[$i]-$free);			
			$dp[$i][1] = max($dp[$i-1][1],$dp[$i-1][0]-$prices[$i]);
		}
		return $dp[$n-1][0];
	}
}
$s = new Solution();
echo "<pre>";
var_dump($s->maxProfit([1,3,2,8,4,9],2));