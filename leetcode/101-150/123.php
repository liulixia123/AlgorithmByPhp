<?php
/**
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。

 * 状态定义
    根据题意，最多只能交易两次
	定义DP[i][k][0]	为第i天不持股时的利润,第k次交易
	定义DP[i][k][1]	为第i天持股时的最大利润，第k次交易
	状态转移方程

针对第 i 天所获得的最大利润，分为两种情况：

如果第 i 天不持有股票，可能第 i - 1 天时就已经不持股，也可能是在第 i 天时卖出了股票，并收取手续费。
如果第 i 天仍然持有股票,可能第 i - 1 天还没有卖出股票，那么当前的最大利润应该是第 i - 1 天的最大利润，交易数为***k***。也可能是在第 i - 1 天时卖出了股票，此时可交易数应为 k - 1 。而在第 i 天时重新购入股票。
	dp[i][k][0] = MAX(dp[i - 1][k][0], dp[i - 1][k][1] + price[i]);
	dp[i][k][1] = MAX(dp[i - 1][k][1]， dp[i - 1][k - 1][0] - price[i]);
1
2
​ 3.边界条件

	dp[0][k][0] = 0;			//第一天不持股，利润为0
	dp[0][k][1] = -price[0]	//第一天需要花钱买入股
*/
class Solution{
	function maxProfit($prices){
		$n = count($prices);
		if($n<=0) return 0;		
		$dp = [];
		$K = 3;
		for ($i=1; $i < $K; $i++) { 
			$dp[0][$i][0] = 0;
			$dp[0][$i][1] = -$prices[0];
		}
		
		for ($i=1; $i < $n; $i++) { 
			for ($j=1; $j < $K; $j++) { 
				$dp[$i][$j][0] = max($dp[$i-1][$j][0],$dp[$i-1][$j][1]+$prices[$i]);			
				$dp[$i][$j][1] = max($dp[$i-1][$j][1],$dp[$i-1][$j-1][0]-$prices[$i]);
			}
			
		}
		return $dp[$n-1][2][0];
	}
}
$s = new Solution();
echo "<pre>";
var_dump($s->maxProfit([3,3,5,0,0,3,1,4]));